// Code generated by MockGen. DO NOT EDIT.
// Source: p2p/msgio.go

// Package mock_p2p is a generated GoMock package.
package mock_p2p

import (
	"github.com/aergoio/aergo/p2p/p2pcommon"
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockMsgReader is a mock of MsgReader interface
type MockMsgReader struct {
	ctrl     *gomock.Controller
	recorder *MockMsgReaderMockRecorder
}

// MockMsgReaderMockRecorder is the mock recorder for MockMsgReader
type MockMsgReaderMockRecorder struct {
	mock *MockMsgReader
}

// NewMockMsgReader creates a new mock instance
func NewMockMsgReader(ctrl *gomock.Controller) *MockMsgReader {
	mock := &MockMsgReader{ctrl: ctrl}
	mock.recorder = &MockMsgReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMsgReader) EXPECT() *MockMsgReaderMockRecorder {
	return m.recorder
}

// ReadMsg mocks base method
func (m *MockMsgReader) ReadMsg() (p2pcommon.Message, error) {
	ret := m.ctrl.Call(m, "ReadMsg")
	ret0, _ := ret[0].(p2pcommon.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMsg indicates an expected call of ReadMsg
func (mr *MockMsgReaderMockRecorder) ReadMsg() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsg", reflect.TypeOf((*MockMsgReader)(nil).ReadMsg))
}

// MockMsgWriter is a mock of MsgWriter interface
type MockMsgWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMsgWriterMockRecorder
}

// MockMsgWriterMockRecorder is the mock recorder for MockMsgWriter
type MockMsgWriterMockRecorder struct {
	mock *MockMsgWriter
}

// NewMockMsgWriter creates a new mock instance
func NewMockMsgWriter(ctrl *gomock.Controller) *MockMsgWriter {
	mock := &MockMsgWriter{ctrl: ctrl}
	mock.recorder = &MockMsgWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMsgWriter) EXPECT() *MockMsgWriterMockRecorder {
	return m.recorder
}

// WriteMsg mocks base method
func (m *MockMsgWriter) WriteMsg(msg p2pcommon.Message) error {
	ret := m.ctrl.Call(m, "WriteMsg", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMsg indicates an expected call of WriteMsg
func (mr *MockMsgWriterMockRecorder) WriteMsg(msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsg", reflect.TypeOf((*MockMsgWriter)(nil).WriteMsg), msg)
}

// MockMsgReadWriter is a mock of MsgReadWriter interface
type MockMsgReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMsgReadWriterMockRecorder
}

// MockMsgReadWriterMockRecorder is the mock recorder for MockMsgReadWriter
type MockMsgReadWriterMockRecorder struct {
	mock *MockMsgReadWriter
}

// NewMockMsgReadWriter creates a new mock instance
func NewMockMsgReadWriter(ctrl *gomock.Controller) *MockMsgReadWriter {
	mock := &MockMsgReadWriter{ctrl: ctrl}
	mock.recorder = &MockMsgReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMsgReadWriter) EXPECT() *MockMsgReadWriterMockRecorder {
	return m.recorder
}

// ReadMsg mocks base method
func (m *MockMsgReadWriter) ReadMsg() (p2pcommon.Message, error) {
	ret := m.ctrl.Call(m, "ReadMsg")
	ret0, _ := ret[0].(p2pcommon.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMsg indicates an expected call of ReadMsg
func (mr *MockMsgReadWriterMockRecorder) ReadMsg() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMsg", reflect.TypeOf((*MockMsgReadWriter)(nil).ReadMsg))
}

// WriteMsg mocks base method
func (m *MockMsgReadWriter) WriteMsg(msg p2pcommon.Message) error {
	ret := m.ctrl.Call(m, "WriteMsg", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMsg indicates an expected call of WriteMsg
func (mr *MockMsgReadWriterMockRecorder) WriteMsg(msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMsg", reflect.TypeOf((*MockMsgReadWriter)(nil).WriteMsg), msg)
}
