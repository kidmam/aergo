// Code generated by mockery v1.0.0. DO NOT EDIT.
package p2p

import (
	"github.com/aergoio/aergo/p2p/p2pcommon"
	"github.com/stretchr/testify/mock"
)

// MockMsgOrder is an autogenerated mock type for the msgOrder type
type MockMsgOrder struct {
	mock.Mock
}

var _ msgOrder = (*MockMsgOrder)(nil)

// GetProtocolID provides a mock function with given fields:
func (_m *MockMsgOrder) GetProtocolID() p2pcommon.SubProtocol {
	ret := _m.Called()

	var r0 p2pcommon.SubProtocol
	if rf, ok := ret.Get(0).(func() p2pcommon.SubProtocol); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(p2pcommon.SubProtocol)
	}

	return r0
}

// GetRequestID provides a mock function with given fields:
func (_m *MockMsgOrder) GetMsgID() p2pcommon.MsgID {
	ret := _m.Called()

	var r0 p2pcommon.MsgID
	if rf, ok := ret.Get(0).(func() p2pcommon.MsgID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(p2pcommon.MsgID)
	}

	return r0
}

// IsNeedSign provides a mock function with given fields:
func (_m *MockMsgOrder) Timestamp() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IsGossip provides a mock function with given fields:
func (_m *MockMsgOrder) IsGossip() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsNeedSign provides a mock function with given fields:
func (_m *MockMsgOrder) IsNeedSign() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRequest provides a mock function with given fields:
func (_m *MockMsgOrder) IsRequest() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ResponseExpected provides a mock function with given fields:
func (_m *MockMsgOrder) ResponseExpected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Skippable provides a mock function with given fields:
func (_m *MockMsgOrder) Skippable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendTo provides a mock function with given fields: p
func (_m *MockMsgOrder) SendTo(p *remotePeerImpl) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*remotePeerImpl) error); ok {
		r0 = rf(p)
	} else {
		nillable := ret.Get(0)
		if nillable != nil {
			r0 = nillable.(error)
		} else {
			r0 = nil
		}
	}

	return r0
}

// SignWith provides a mock function with given fields: ps
func (_m *MockMsgOrder) SignWith(ps PeerManager) error {
	ret := _m.Called(ps)

	var r0 error
	if rf, ok := ret.Get(0).(func(PeerManager) error); ok {
		r0 = rf(ps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
