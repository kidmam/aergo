// Code generated by mockery v1.0.0. DO NOT EDIT.
package p2p

import "github.com/stretchr/testify/mock"

import "github.com/golang/protobuf/proto"

// MockMessageHandler is an autogenerated mock type for the MessageHandler type
type MockMessageHandler struct {
	mock.Mock
}

// checkAuth provides a mock function with given fields: msgHeader, msgBody
func (_m *MockMessageHandler) checkAuth(msgHeader Message, msgBody proto.Message) error {
	ret := _m.Called(msgHeader, msgBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(Message, proto.Message) error); ok {
		r0 = rf(msgHeader, msgBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *MockMessageHandler) postHandle(msgHeader Message, msgBody proto.Message) {
}
func (_m *MockMessageHandler) preHandle() {
}

// handle provides a mock function with given fields: msgHeader, msgBody
func (_m *MockMessageHandler) handle(msgHeader Message, msgBody proto.Message) {
	_m.Called(msgHeader, msgBody)
}

// parsePayload provides a mock function with given fields: _a0
func (_m *MockMessageHandler) parsePayload(_a0 []byte) (proto.Message, error) {
	ret := _m.Called(_a0)

	var r0 proto.Message
	if rf, ok := ret.Get(0).(func([]byte) proto.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
